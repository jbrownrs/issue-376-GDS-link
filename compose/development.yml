# docker-compose file for local development and testing with container image.
#
# Extends compose/base.yml so launch services via:
#
#   docker-compose -f compose/base.yml -f compose/development.yml
version: '3.2'

## The docker-compose version on CircleCI does not support version 3.4 files
## which are required to template common configuration for the frontend
## containers like below using extension fields. Instead we must copy-paste the
## configuration.
##
## See: https://docs.docker.com/compose/compose-file/#extension-fields
#x-frontend-template: &frontend-template
#  build:
#    context: ..
#    dockerfile: ./compose/development.frontend.Dockerfile
#
#  volumes:
#    # For the frontend, mount the local frontend directories inside the container
#    # as a volume to allow local changes to be reflected without having to
#    # re-build the container.
#    - type: bind
#      source: ../ui/frontend/src
#      target: /usr/src/app/src
#      read_only: true
#    - type: bind
#      source: ../ui/frontend/public
#      target: /usr/src/app/public
#      read_only: true
#
#    # This volume is only used by some frontend services
#    - "frontend_build:/tmp/frontend_build"

services:
  mailhog:
    image: mailhog/mailhog
    ports:
      - "8025:8025"
  # Main web application service
  development_app: &development_app
    build:
      context: ..
      dockerfile: ./compose/development.django.Dockerfile
    expose:
      - "8080"
    ports:
      - "8000:8080"
    depends_on:
      - "db"
      - "mailhog"
      - "hydra"
      - "lookupproxy"
      - "frontend_watch"
      - "hydra-create-clients"
      - "celery"
    volumes:
      # For devserver, mount the local directory inside the container as a volume
      # to allow local changes to be reflected without having to re-build the
      # container.
      - type: bind
        source: ../
        target: /usr/src/app
        read_only: true
      - "frontend_build:/tmp/frontend_build"
    # Options stdin_open and tty are set to allow you to attach to the container for the purposes
    # of debugging.
    # See https://blog.lucasferreira.org/howto/2017/06/03/running-pdb-with-docker-and-gunicorn.html
    stdin_open: true
    tty: true
    environment:
      DJANGO_FRONTEND_APP_BUILD_DIR: "/tmp/frontend_build"
      CELERY_BROKER_URL: amqp://guest:guest@rabbitmq:5672//
    env_file:
      - base.env
      - development.env
      - ../secrets.env

  # Celery task runner
  celery:
    <<: *development_app
    expose: []
    ports: []
    # We embed the "beat" worker into our celery worker since there is only one
    # instance. In production, one may have multiple workers but there should be
    # only one beat worker. See
    # http://docs.celeryproject.org/en/latest/userguide/periodic-tasks.html#starting-the-scheduler
    entrypoint: ['celery']
    command: ['-A', 'mediawebapp', 'worker', '-l', 'info', '-B']
    depends_on:
      - "db"
      - "mailhog"
      - "hydra"
      - "lookupproxy"
      - "hydra-create-clients"
      - "rabbitmq"

  # RabbitMQ message broker
  rabbitmq:
    image: rabbitmq:alpine
    expose:
      - "5672"

  # Front end which is continually re-build using webpack's watch support. Used
  # to provide an updated source of files for the Django app.
  frontend_watch:
    build:
      context: ..
      dockerfile: ./compose/development.frontend.Dockerfile

    volumes:
      # For the frontend, mount the local frontend directories inside the container
      # as a volume to allow local changes to be reflected without having to
      # re-build the container.
      - type: bind
        source: ../ui/frontend/src
        target: /usr/src/app/src
        read_only: true
      - type: bind
        source: ../ui/frontend/public
        target: /usr/src/app/public
        read_only: true
      - "frontend_build:/tmp/frontend_build"
    command: ["run", "watch"]
    environment:
      APP_BUILD: "/tmp/frontend_build"

  # Front end live documentation
  frontend_styleguidist:
    build:
      context: ..
      dockerfile: ./compose/development.frontend.Dockerfile

    volumes:
      # For the frontend, mount the local frontend directory inside the container
      # as a volume to allow local changes to be reflected without having to
      # re-build the container.
      - type: bind
        source: ../ui/frontend/src
        target: /usr/src/app/src
        read_only: true
      - type: bind
        source: ../ui/frontend/public
        target: /usr/src/app/public
        read_only: true
    expose:
      - "6060"
    ports:
      - "6060:6060"
    command: ["run", "styleguidist-server"]

  # Swagger
  swagger:
    image: swaggerapi/swagger-ui
    expose:
      - "8080"
    ports:
      - "7000:8080"
    depends_on:
      - "development_app"
    environment:
      API_URL: http://localhost:8000/api/swagger.json

volumes:
  frontend_build:
